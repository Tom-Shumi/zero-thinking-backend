// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testThinkingTrees(t *testing.T) {
	t.Parallel()

	query := ThinkingTrees()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testThinkingTreesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThinkingTreesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ThinkingTrees().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThinkingTreesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThinkingTreeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testThinkingTreesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ThinkingTreeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ThinkingTree exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ThinkingTreeExists to return true, but got false.")
	}
}

func testThinkingTreesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	thinkingTreeFound, err := FindThinkingTree(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if thinkingTreeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testThinkingTreesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ThinkingTrees().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testThinkingTreesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ThinkingTrees().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testThinkingTreesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	thinkingTreeOne := &ThinkingTree{}
	thinkingTreeTwo := &ThinkingTree{}
	if err = randomize.Struct(seed, thinkingTreeOne, thinkingTreeDBTypes, false, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}
	if err = randomize.Struct(seed, thinkingTreeTwo, thinkingTreeDBTypes, false, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thinkingTreeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thinkingTreeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ThinkingTrees().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testThinkingTreesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	thinkingTreeOne := &ThinkingTree{}
	thinkingTreeTwo := &ThinkingTree{}
	if err = randomize.Struct(seed, thinkingTreeOne, thinkingTreeDBTypes, false, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}
	if err = randomize.Struct(seed, thinkingTreeTwo, thinkingTreeDBTypes, false, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = thinkingTreeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = thinkingTreeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func thinkingTreeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func thinkingTreeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ThinkingTree) error {
	*o = ThinkingTree{}
	return nil
}

func testThinkingTreesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ThinkingTree{}
	o := &ThinkingTree{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ThinkingTree object: %s", err)
	}

	AddThinkingTreeHook(boil.BeforeInsertHook, thinkingTreeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	thinkingTreeBeforeInsertHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.AfterInsertHook, thinkingTreeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	thinkingTreeAfterInsertHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.AfterSelectHook, thinkingTreeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	thinkingTreeAfterSelectHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.BeforeUpdateHook, thinkingTreeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	thinkingTreeBeforeUpdateHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.AfterUpdateHook, thinkingTreeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	thinkingTreeAfterUpdateHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.BeforeDeleteHook, thinkingTreeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	thinkingTreeBeforeDeleteHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.AfterDeleteHook, thinkingTreeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	thinkingTreeAfterDeleteHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.BeforeUpsertHook, thinkingTreeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	thinkingTreeBeforeUpsertHooks = []ThinkingTreeHook{}

	AddThinkingTreeHook(boil.AfterUpsertHook, thinkingTreeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	thinkingTreeAfterUpsertHooks = []ThinkingTreeHook{}
}

func testThinkingTreesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThinkingTreesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(thinkingTreeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testThinkingTreesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThinkingTreesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ThinkingTreeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testThinkingTreesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ThinkingTrees().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	thinkingTreeDBTypes = map[string]string{`ID`: `int`, `Title`: `varchar`, `ThinkingTree`: `text`, `InsertDate`: `date`}
	_                   = bytes.MinRead
)

func testThinkingTreesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(thinkingTreePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(thinkingTreeAllColumns) == len(thinkingTreePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testThinkingTreesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(thinkingTreeAllColumns) == len(thinkingTreePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ThinkingTree{}
	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, thinkingTreeDBTypes, true, thinkingTreePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(thinkingTreeAllColumns, thinkingTreePrimaryKeyColumns) {
		fields = thinkingTreeAllColumns
	} else {
		fields = strmangle.SetComplement(
			thinkingTreeAllColumns,
			thinkingTreePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ThinkingTreeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testThinkingTreesUpsert(t *testing.T) {
	t.Parallel()

	if len(thinkingTreeAllColumns) == len(thinkingTreePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLThinkingTreeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ThinkingTree{}
	if err = randomize.Struct(seed, &o, thinkingTreeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ThinkingTree: %s", err)
	}

	count, err := ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, thinkingTreeDBTypes, false, thinkingTreePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ThinkingTree struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ThinkingTree: %s", err)
	}

	count, err = ThinkingTrees().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
